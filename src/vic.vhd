LIBRARY ieee;
USE IEEE.numeric_std.all;
USE ieee.std_logic_1164.all;

entity VIC is
    port (
            clk : in std_logic;
            rst : in std_logic;
            IRQ_SERV : in std_logic; -- Acknowledgment of the interrupt
            IRQ0, IRQ1 : in std_logic;
            IRQ : out std_logic; -- new interruption generated by the VIC
            VICPC : out std_logic_vector(31 downto 0) -- interrupt PC address
         );
end entity;

architecture rtl of VIC is
begin

process(clk, rst)
    variable IRQ0_req, IRQ1_req : std_logic := '0'; -- interruption request
    variable IRQ0_0, IRQ0_1 : std_logic := '0'; -- save the IRQ0 n and n -1 values
    variable IRQ1_0, IRQ1_1 : std_logic := '0'; -- save the IRQ1 n and n -1 values
begin
    if rst = '1' then
        IRQ0_1 := '0';
        IRQ0_0 := '0';
        IRQ1_1 := '0';
        IRQ0_req := '0';
        IRQ1_req := '0';
        IRQ1_0 := '0';
        VICPC <= (others => '0');
        IRQ <= '0';
    elsif rising_edge(clk) then
        if IRQ_SERV = '1' then
            IRQ1_req := '0';
            IRQ0_req := '0';
        end if ;
        IRQ0_1 := IRQ0_0;
        IRQ0_0 := IRQ0;

        IRQ1_1 := IRQ1_0;
        IRQ1_0 := IRQ1;
        if (IRQ0_0 = '1' and IRQ0_1 ='0') then -- rising_edge of IRQ0
            IRQ0_req := '1';
        end if ;
        if (IRQ1_0 = '1' and IRQ1_1 ='0') then -- rising_edge of IRQ1
            IRQ1_req := '1';
        end if ;
        if IRQ0_req = '1' then
            VICPC <= x"00000009";
        elsif IRQ1_req = '1' then
            VICPC <= x"00000015";
        else
            VICPC <= (others => '0');
        end if;
        
        IRQ <= IRQ1_req or IRQ0_req;
    end if;
end process;
end architecture;

